{"version":3,"sources":["webpack:///src/app/pipes/pipe/common.pipe.ts","webpack:///src/app/pipes/pipe/pipe.module.ts"],"names":["standardizedId","id","preNum","parseInt","name","VND","value","Number","valueString","toString","includes","wholePart","split","replace","match","p1","p2","length","decimalPart","result","PipeModule","providedIn","imports","declarations","exports"],"mappings":"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","file":"common-es5.js","sourcesContent":["import { Pipe, PipeTransform, Injectable } from '@angular/core';\n\n@Pipe({\n  name: 'standardizedId'\n})\nexport class standardizedId implements PipeTransform {\n  transform(id: any): any {\n    let preNum = \"#\";\n\n    if(typeof id == \"string\") {\n      id = parseInt(id)\n    }\n\n    if(id < 10){\n      preNum = \"#00000\";\n    } else if (id < 100){\n      preNum = \"#0000\";\n    } else if (id < 1000){\n      preNum = \"#000\";\n    } else if (id < 10000){\n      preNum = \"#00\";\n    } else if (id < 100000) {\n      preNum = \"#0\";\n    } else {\n      preNum =\"#\";\n    }\n    return preNum + id;\n  }\n\n}\n\n@Pipe({\n  name: 'vnd'\n})\n@Injectable()\nexport class VND implements PipeTransform {\n  transform(value: any): string {\n    if (typeof value != \"number\" && typeof value != \"string\") {\n      return value;\n    }\n    if (typeof value == \"string\") {\n      value = Number(value);\n    }\n    const valueString = value < 0 ?  (-value).toString() : value.toString();\n\n    if (valueString.includes(\".\")) {\n      const wholePart = valueString.split(\".\")[0]\n        .replace(/./g, (match, p1, p2) => {\n          return p1 && match !== \",\" && ((p2.length - p1) % 3 === 0) ? '.' + match : match;\n        });\n      const decimalPart = valueString.split(\".\")[1];\n\n      return `${value < 0 ? '-' : ''}${wholePart},${decimalPart}`;\n    } else {\n      const result = valueString.replace(/./g, (match, p1, p2) => {\n        return p1 && match !== \",\" && ((p2.length - p1) % 3 === 0) ? '.' + match : match;\n      });\n      return `${value < 0 ? '-' : ''}${result} Ä‘`;\n    }\n  }\n}\n","import { standardizedId, VND } from './common.pipe';\nimport { NgModule, Injectable } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n@Injectable({providedIn:\"root\"})\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [standardizedId, VND],\n  exports: [\n    standardizedId,\n    VND\n  ]\n})\nexport class PipeModule { }\n"]}